Nome dos integrantes:

    Mateus Emer Fauri       00289061
    Laura Reis da Silveira  00290707

Arquivos:
    main.py:

        le o nome do arquivo de entrada, o nome de arquivo que sera a saida e o tipo da saida para ser escrito (ex1 ou ex2).
        Com o arquivo de entrada aberto, ele le linha por linha, fazendo o processamento necessario para pegar o tamanho 
        e cria uma instancia da classe sort para cada tipo de gap ["Potencia de 2", "knuth", "Ciura"] e usa o metodo shell_sort dele.

    shellSort.py:

        É criado uma classe "sort" que recebe atributos lista (o array que deve ser ordenado) e o tamanho dela 
        pelo metodo contrutor.
        A classe tem como metodos publicos shell_sort e insertion_sort, e privados _potencia_2, _knuth e _ciura

        Metodos publicos:
            insertion_sort é uma função que recebe o inicio e um gap para fazer a ordenação.

            shell_sort é uma função que recebe o tipo de gap que ira usar, como ira imprimir a saida no arquivo (saida 1 ou 2) e o arquivo de saida.
            Ele seleciona a lista de gaps pelo tipo passado para função, e chama alguns dos metodos privados para construir a lista de gaps.
            Com os gaps e lista para ordenar, ele faz a ordenação e escreve no arquivo de saida (que depende se é do tipo 1 ou 2)

    dna_sorting.cpp:
        
        Arquivo em c++ com o desafio extra do trabalho, UVA 612 - DNA Sorting, aceito com id 28519006, ver print no arquivo JPEG UVA 612 - DNA Sorting accepted.
	Optamos fazer em c++ para otimizar o código, notamos uma grande diferença entre Python e C++.


